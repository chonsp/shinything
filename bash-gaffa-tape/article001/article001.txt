BASH Gaffa Tape

An introduction to the Born Again Shell

BASH (Born Again Shell) has been the default LINUX shell for several years.  The aim of this series is to give an overview of the BASH shell, providing a description of syntax and built in functions.  BASH is great for lashing together several different programs with minimal overhead.  For this reason, this of series of articles is called "BASH Gaffa Tape".

== Running BASH ==

When a terminal window is opened a shell interpreter is started.  The default shell for the user can be printed by typing,

echo $SHELL

This variable is set within the users account details, either in /etc/passwd or via NIS or LDAP.  For example,

grep pi /etc/passwd

returns

..something..

Scripts can be run by typing the commands directly into a terminal window or by using a shell script text file.  A shell script file can be run in two ways: by sourcing the script

source script.sh OR . script.sh

or by executing the script,

./script.sh

When a file is sourced, it is as if the file was typed into the current shell.  Any variables which are declared in the script remain set when the script finishes.  The script also has access to all variables declared in the current shell.  In contrast, when a script is executed a new bash interpreter session is started.  At the end of the bash session any local variables are cleaned up.

To execute a script, the path to the BASH interpreter should be given at the top of the file:

#!/bin/bash

Then the file should be made executable

chmod 755 script.sh

Finally, it is possible to type ./script.sh to execute the script.

==Variables==

A variable is defined by assigning it a value,

myName="JohnDoe"

BASH is very sensitive to the use of white spaces.  For the declaration to be interpreted correctly there must not be any spaces between the variable name and the equals sign or the equals sign and the value.

Once a variable has been defined, it is used by prepending the name with a dollar sign,

echo $myName

Variables which are defined in one shell are not available in a sub-shell unless they are exported,

export myName="JohnDoe"

where the variable can be exported when it is declared or afterwards.

==Conditions==

Logic conditions are inclosed in "[]" parentheses.  A variable can be tested using,

#!/bash/bin
if [[ -z $myName ]]; then
  echo "myName is not defined"
else
  echo "myName is defined as \"$myName\""
fi

In this case the first condition is true if the variable is not set.  At least
one white space must separate the pieces of the logic condition.  Following
the instructions for nano given in the first C cave tutorial (issue 3), open a file called condition.sh.  Then save it and change its permissions using

chmod u+x condition.sh

This sets the script to be executable by the current user.  Finally, run the program by typing 

./condition.sh

Then try

export myName=$HOSTNAME

and run the program again.  Then try 

unset myName

and run the program again.  The unset command removes the variable myName.  A summary table of logic tests of a variable are given below,

....add the table here....

==Loops==

BASH provides many familar loop structures.  The for loop is most commonly
used with input files or variables,

#!/bin/bash
# Declare a string with values separated by white spaces
list="a b c" 
# print each character in the 'list' variable.
for l in $list; do
  echo $l
done

This can also be written on one line as

list="a b c"; for l in $line; do; echo $l; done

where the newline characters in the script file are replaced with semi-colons.

==BASH configuration files==

To run a program without the "./" prefix or the full path, the directory in which the program sits should be added to the PATH variable.  For example, the test program could be put into a directory of handy scripts

mkdir ~/bin
cp condition.sh ~/bin/
PATH=$PATH:$HOME/bin

where "~/" is a shorthand way of referring to $HOME and $HOME is the users home directory defined in /etc/passwd, or NIS or LDAP.  Now the script can be run by typing

condition.sh

If a new shell is opened, then the PATH variable will start from the default value.  To append to the PATH variable each time a BASH shell is started, 

export PATH=$PATH:$HOME/bin

should be added to the end of the ~/.bashrc file.
